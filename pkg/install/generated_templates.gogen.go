// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 826,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xbb\x8e\xdb\x30\x10\xec\xf9\x15\x03\xb8\x70\x12\x58\x0a\xd2\x05\xea\x6c\x17\x29\x12\xa4\x50\x1e\x4d\x90\x62\x45\xae\xce\x3c\xd3\xa4\xc0\x87\xef\x21\xe8\xdf\x0f\x92\x7c\x07\xcb\xf6\x1d\x60\x5c\xc7\xdd\x9d\xe5\xce\xce\x4e\x96\x65\x62\x86\xdf\x1b\x46\x60\xbf\xd7\x92\x41\x52\xba\x64\xe3\x02\xd2\xa4\x10\xd9\xc3\x3b\xc3\x61\x01\xb2\x6a\x92\x42\xa5\xad\xd2\xf6\x06\xe4\x59\xcc\xe0\xac\x79\x80\x65\x56\xac\x50\x3b\x8f\xef\xa9\x62\x6f\x39\x72\xc0\x9d\x8e\x9b\xa1\x25\xab\x28\xb0\xea\x27\x70\x08\x90\xce\x46\xef\x0c\x3e\x94\xab\xe5\xfa\x63\x2e\xa8\xd1\x7f\xd9\x07\xed\x6c\x81\xfd\x17\xb1\xd5\x56\x15\xf8\x35\xb2\x5a\x8e\xa4\xc4\x8e\x23\x29\x8a\x54\x08\xc0\x50\xc5\x26\xf4\x2f\xc0\xd2\x8e\x0b\xd4\x26\xdd\x8b\xe3\xa0\x6d\xa1\x6b\xe4\x3f\x69\xc7\xa1\x21\xc9\xe8\xba\x43\x7d\x08\x0b\xb4\xed\xb4\xda\xb6\x60\xab\xba\x4e\xf4\xba\x1c\x13\xf2\x15\xc9\x9c\x52\xdc\x38\xaf\x1f\x29\x6a\x67\xf3\xed\xd7\x90\x6b\xf7\xf9\x85\xea\x7a\x14\xa7\x74\x86\xaf\xe5\x29\x7c\x32\x3c\x40\x32\x50\xa3\xbf\x79\x97\x9a\x50\xe0\xdf\xfc\xd3\xfc\xff\xd0\xe7\x39\xb8\xe4\x25\x4f\x92\x7b\xf6\xd5\x51\x22\x83\x75\xb6\x3c\x00\xff\x94\x3f\x5e\xc7\xbe\x6f\xb9\xd5\x78\xf7\xeb\x77\x74\x86\x4b\xae\x7b\xd0\xf3\x8e\x6f\x8c\x16\xc0\xb9\xac\x93\xff\x42\xaa\x6e\x59\xc6\x83\x6c\x17\xed\x72\x46\xe7\xf4\xf8\xa7\xee\xb8\xe4\x07\x13\xfa\x97\xe2\x9a\x92\x89\xa3\x41\x7a\x1f\x3d\x05\x00\x00\xff\xff\xdb\x2d\xc3\x7c\x3a\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7263,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\xbb\x6e\x8b\xc3\xf6\x5c\x5c\x9a\x0f\x37\x97\x26\x35\xec\xe4\x0e\x7d\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x17\x46\xff\xf7\xc3\x90\xfb\xc1\x95\x65\xa7\xc8\xdb\xf9\x21\xb1\xc9\xe1\x70\xe6\x37\xdf\xdc\xc5\x62\x71\x22\x6a\xf5\x6f\x74\xa4\xac\xc9\x41\xd4\x35\x2d\x77\xe7\x27\x5b\x65\x8a\x1c\x5e\x63\xad\x6d\x5b\xa1\xf1\x27\x15\x7a\x51\x08\x2f\xf2\x13\x00\x23\x2a\xcc\x61\xad\x9b\x3f\xee\xef\x41\xad\x21\xfb\x28\x2a\xa4\x5a\x48\x84\x3f\xff\xec\xf6\xc3\x9f\x39\xdc\xdf\x4f\x77\xef\xef\x01\x4d\xc1\x64\x54\xa3\x64\x66\x0e\x6b\xad\xa4\xa0\x1c\xce\x4f\x00\x08\x35\x4a\x6f\x1d\xef\x00\x54\xc2\xcb\xf2\x17\xb1\x42\x4d\x71\x21\xbd\x9b\xa9\xbd\x13\x1e\x37\x6d\xdc\xf4\x6d\x8d\x39\xdc\xa0\x74\x28\x3c\x9e\x00\x78\xac\x6a\x2d\x3c\x76\xcc\x12\x0d\xf8\x47\x18\x63\xbd\xf0\xca\x9a\x81\x39\x40\xed\x6c\x85\xbe\xc4\x86\x32\x65\x97\xb5\x75\x3e\x87\xd9\xc5\xd9\xc5\xf9\x0c\x9e\x81\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\x2c\x2b\xf4\x4e\x49\x62\xe5\x6a\xab\x8c\x7f\x4e\xc0\x87\xb3\x8e\xb1\x9e\xe8\x70\xa0\x05\x40\x8f\x45\xd8\xb2\x05\xde\x4e\x50\xe0\x9f\x15\x7a\x91\x6d\x9b\x15\x3a\x83\x1e\x83\x70\x96\x72\xd0\xca\x74\x2c\x18\x3a\xb7\x53\x12\x5f\x4a\x69\x1b\xe3\x3f\x4e\x6f\x00\xd8\x59\xdd\x54\x38\xc8\xb0\xe8\x64\xd8\x28\xbf\xd8\x62\x3b\x5c\x44\x0c\x9f\x1f\x2f\xee\x57\x46\x7e\x0b\x3e\x52\x04\xcf\x48\xa8\x0a\x5c\x8b\x46\xfb\x0f\xb6\xc0\x1c\xce\xbe\x3d\x3b\x83\x67\xb0\x2f\xd1\x40\xc5\xd2\x60\x01\x0e\x45\xb1\xb0\x46\xb7\x73\xd8\x23\xec\xad\x79\xee\x61\x85\x20\x56\x1a\x19\x48\x59\x56\xb6\x38\xe9\x18\x3e\x83\x4f\xa5\x22\x50\x04\x02\x7c\x55\xaf\x09\x1a\xc2\x02\xd6\xd6\xc1\x06\x0d\x3a\xe1\x95\xd9\xc0\xed\xed\xcf\xb0\xc5\x96\x32\x78\x67\xe0\xfd\xdf\x09\x7e\xbc\x84\xf3\xec\xfc\x6c\x3e\x70\xe9\xef\x8e\x2a\x10\x08\x87\xa9\x1c\x64\x59\x14\x83\x58\x80\x00\xc2\x5a\xb0\x37\x75\x40\xc1\x1e\x07\x36\x52\x18\xd8\x3b\xe5\x59\xd0\xec\x38\x7e\x1b\x34\x03\x18\x58\xd5\xbe\x7d\xad\x5c\x0a\x62\x85\x85\x6a\xaa\x1c\x3e\x60\x65\x5d\x9b\xea\x89\xb0\xb6\x5a\xdb\x3d\x6b\xd4\x5d\xad\x28\xa8\xda\x10\xaf\x09\x90\x0d\x79\x5b\x29\x46\x60\x6b\xec\xde\xfc\x5e\x5a\xf2\x34\xb0\x58\x2b\x8d\x73\xd8\x97\x4a\x96\xd0\xda\x06\xf6\x4a\xeb\xa8\x94\xb7\x50\x58\x0e\x50\x5e\xe6\x43\xfc\x8b\x03\xbb\x37\x2c\xf6\xc0\xc0\x61\x6d\xc1\x09\x5f\xa2\x03\x5f\x0a\xd3\x5d\xbc\x51\xbe\x6c\x56\x60\x79\x11\x41\xab\x2d\x66\xf0\x9b\x6d\x9e\x6b\x0d\x42\x93\xed\xaf\x98\x82\x0d\xca\x83\x32\xde\x86\x33\xd2\x1a\x2f\x94\x41\x37\x87\x15\x6a\xbb\xcf\xe0\x16\x47\x54\x4b\xef\x6b\xca\x97\x4b\xf6\x29\x59\xb0\x47\x6b\xdc\x08\xd9\x86\x85\xe5\xa6\x51\x05\xd2\xb2\x21\x5c\xd4\x4e\xed\x84\xc7\xe0\x77\xac\xc5\x72\x60\xd1\x1b\x81\xa8\x5c\x48\x6b\xd6\x6a\x33\x6c\x01\xc4\x85\x0f\xa2\xce\x93\xc5\x34\xf4\x16\xc9\xb1\xaf\x35\x48\x88\xc9\x65\x64\x32\xfa\xdd\x17\x8d\xb1\x57\x54\xf2\x4a\x29\x76\x08\x02\x0a\xb5\x5e\xa3\xe3\x34\xdb\x73\xe8\xc2\x69\x4c\xa5\x01\xfb\xc8\x2e\x45\x9f\xd3\xd1\x4e\x15\xd8\xe3\xbd\x56\x9b\x4a\xd4\xa3\x20\xca\x97\x20\x0c\xa0\xf1\xae\x0d\x3a\xdc\x45\xa2\xbb\x39\x08\x53\x40\x63\xa4\xad\x38\xbf\x87\xf3\x51\xdb\x0f\xc1\x8e\xc2\x14\x03\x17\x34\xbb\xc0\x41\x21\x75\x86\x7c\x60\x01\x86\xe1\x2b\x2c\x90\x1c\xfb\xa2\x05\x42\x0a\xf0\x16\x54\xc5\x99\x15\xae\xae\xaf\x42\xf4\xc3\x0b\x56\x8b\xd4\xc6\x28\x33\x5e\xce\xca\xed\xd0\xa9\xb5\x92\x21\xc5\x43\xdd\xb8\xda\x12\xd2\xe9\x5f\x00\x72\xe0\x12\xf3\x46\x44\x91\x01\xe2\xfb\xfe\x02\x70\x20\xdc\x66\x8c\xcf\x47\x10\xdb\xd4\x1b\x4e\x1c\x94\x40\x33\xcd\xbd\xcf\x1e\xc9\xbe\x0f\xcf\x1d\xc9\xbe\x3d\x9c\x43\x08\x3e\x48\xfc\x49\x69\xe8\x50\x77\x18\x12\xa4\xb1\x30\xcb\xb9\x6c\x92\x9f\x81\xaa\xc4\x06\xa3\xf7\xf3\x81\x0c\xde\x2a\x53\x04\x9d\x2b\xce\x27\x0e\xe5\xe8\xb5\x31\x97\x68\x14\x84\x9c\x35\xc2\x51\x36\x02\x77\x16\x20\xfc\x10\xf0\x65\xb3\xca\x0a\x2b\xb7\xe8\x32\x69\xab\xa5\xeb\x32\x40\x8c\x7b\x2f\x06\xe8\x7a\x3b\x72\x87\xc0\xdd\x03\xdf\xea\xc5\x06\x58\xd2\x6c\xa0\x09\xd7\xe4\xd0\x31\x54\x36\xe5\x96\x9f\x67\xdf\x5c\x64\xe7\x53\xda\xeb\x46\xeb\x6b\xab\x95\x6c\x73\x78\xb7\xfe\x68\xfd\xb5\x43\x4a\xb5\x70\x48\xb6\x71\x12\x29\x4d\xe0\x0e\xff\xdb\x20\xf9\xc9\x1a\x80\xac\x9b\x1c\xbe\x3b\xab\x26\x8b\x55\xc8\xf1\x39\x7c\xff\xed\x07\x35\x36\x16\xd6\xa5\x87\x17\xa3\x65\xae\x43\x93\x71\x71\x76\xc1\x25\x53\x99\xb5\x75\x55\x70\x59\xa1\x07\x6a\xad\x76\x68\x90\xe8\xda\xd9\x15\xa6\x12\x30\xa4\x57\xd3\x72\x1d\xaf\x8a\x0c\xa7\xcb\xc2\x97\x39\x2c\x45\xad\x22\xd2\xbb\xef\x97\xaa\x40\xe3\x95\x6f\xb3\xba\x59\x25\xb4\xca\x28\xaf\x84\x7e\x8d\x5a\xb4\xb7\x1c\x9f\x05\xe5\xf0\x5d\x42\xe0\x55\x85\xb6\xf1\x47\xf6\xb8\xba\xaa\xff\x0f\x51\x93\xa0\x9d\x18\xe6\x78\x5f\x04\xb1\xbe\x5d\x47\xc9\xd0\xcb\x20\x59\xb1\x24\x2a\xb9\x33\xb4\xb1\x57\x05\x6d\xbb\x7c\xb3\x61\x93\x81\x32\xd1\xe7\x9e\x53\x3c\x43\x54\x2e\x27\x69\xb2\xc7\xec\x57\xa3\xdb\x1c\xbc\x6b\x90\xb9\x71\xf3\x13\x32\xd4\xaa\x4b\xec\x1c\x52\x35\xba\xb5\x75\x12\x99\x69\xec\x76\xb8\xd9\x79\x4c\xf0\xb4\x21\x99\xca\xbe\x13\xae\x93\x3d\x92\x7d\x9d\xf8\x49\x8c\xbe\x33\x52\x37\x21\x73\x72\xcf\x16\x0b\x5c\x9f\x55\x63\x53\xf0\x85\x1e\xa6\xef\x62\x7e\xe0\xa3\x07\xfd\xc5\x90\x5d\xa1\x40\xa9\x85\xe3\x5e\x6d\x65\x77\x49\x02\x78\xa2\x0d\x88\xe9\x31\x55\xde\x59\xeb\x97\x19\x51\xf9\xa8\x02\xc2\x4c\x6e\x9d\x8d\x25\x6a\x16\x6f\x9e\xf7\x24\x09\x07\x34\x3b\xe5\xac\x09\x05\x21\xd6\xda\xd9\xfb\xcf\x3f\xbd\x79\xf5\xeb\xc7\xb7\xef\xae\x66\xb1\x04\xcc\x19\x0f\xbb\x43\xe7\xa6\xf5\x3a\x61\x13\x4a\xdc\xaa\x8d\xd5\xd4\xeb\x63\x3a\x3e\x28\xb4\x0f\x75\x1c\x9d\x93\x89\x1f\x55\x94\x6b\x1e\x8f\x2a\xfd\x6d\x9c\xa2\x93\x56\xa4\x93\x2e\xd8\x24\x61\x71\xd8\xd0\xa4\x46\x0f\xdd\x4c\xdf\x73\x0b\x03\x42\x7b\x74\x86\x7b\xea\x07\x12\xaf\x9d\xad\xd8\x2d\xfa\x8e\x65\x0e\x82\xd8\xdd\xba\xaa\xca\x30\x68\x2b\xb7\xf4\xd0\xd8\x68\x76\xf9\x11\x5c\x46\xb8\x27\xb8\xec\x84\x6e\xf0\x01\x26\x5f\x72\xe2\x43\x1f\xe8\x6b\xee\x13\x1e\xc0\x25\x7f\x5a\xea\x9f\x28\xf6\x8f\xf8\x25\x53\xc5\xee\x66\x42\x37\xcd\x0f\x5f\x8a\xbc\xbd\xe0\xa6\xc4\x02\x35\x75\xad\x5b\xf8\xf9\xd3\xa7\x6b\x58\x09\x52\x12\x44\xe3\x4b\x90\x0e\x43\x26\x15\x3a\x56\xf5\x71\x10\x60\x86\x3b\x25\x82\xe2\x77\x57\xef\x3e\xfd\xfe\xf2\xf3\xa7\x9f\x3f\xdf\xbe\xb9\xb9\x0b\xea\x0e\x4b\xef\xdf\xfc\x76\x37\x71\xf8\x9d\x70\x8a\xc7\x38\xea\x1b\xe4\x84\x61\x6c\x5f\x0e\xec\xf7\xd6\xd9\x6a\x6a\xc3\x48\x76\x83\xeb\x7c\xa2\xf9\xa4\x57\xe4\xc4\xc6\x2a\x8c\x00\x30\xe6\xf9\x04\x8f\x08\x41\x1c\x4e\xb1\xe0\x4a\x2c\x85\x2c\xb1\x60\xd7\x4a\x7d\x7b\x68\xab\x19\x29\xe6\x3e\x4f\xb8\x58\xd7\xf5\xcd\xc9\x81\x6e\xb8\x0e\x07\xe7\xe1\x12\x1e\x0a\x3b\x8c\x7d\x89\x94\xfa\xc2\xd8\xbd\xfa\xbd\x65\x29\x1b\xc6\x29\x44\x5c\x78\x42\x08\x8e\x08\xa5\xdd\x87\xc1\xd7\x1a\x83\x32\x98\x4c\xf9\xa9\xef\x2c\x16\x83\x02\x61\xf0\xe1\xcb\x2f\x87\xa5\xac\x6b\xfa\x32\xda\xc9\x4c\xea\x86\x3c\xba\x8c\x13\xb8\x4e\x21\xf9\x4c\x31\xd7\x8c\x50\xbc\x8a\xa4\xef\xae\x27\x4a\x71\xda\x21\xf4\x61\xb0\x9e\x7a\xf6\x28\x43\x4f\xcf\xde\xe5\x1d\x53\x86\x51\x37\x29\x41\xa9\xc4\x1d\xf5\xe5\xc9\xa4\xcb\x54\x04\x55\x43\x61\xf4\x0f\xe8\x29\x2c\x62\x38\xad\x42\x61\x0b\x3d\x5e\x98\xf8\x5f\xf4\x63\xf4\x69\x2a\x4b\x9f\x5c\x62\x18\xb2\x03\x27\x83\xff\x44\x10\x2e\x06\xb1\xc0\x2d\x0a\xe5\x2e\x1f\x94\xbd\x54\xac\x9b\xa4\xc3\x1c\x8d\xf7\xf9\xe6\x97\xf8\x32\x21\xcc\x26\xee\x5d\x29\x1f\xa6\x65\x52\xde\xba\x76\x48\xd7\x6f\xb9\x33\x4e\xd8\x3d\x15\x73\xec\x36\x89\xee\x5d\xc8\x1c\x0d\xa7\x34\x16\xfa\xde\xf9\x6f\x2f\xd2\xc8\x3c\xcd\xc7\xbf\xdf\xbf\xf9\xed\xf4\x9f\x71\x66\x0f\x6d\x75\x43\xe8\x96\xa3\xb0\x59\x1a\xe8\x8c\x0f\x87\x53\xe3\xf4\xe5\xfd\x3d\x64\x57\xca\xb3\xb2\xe1\xf1\x6e\x4a\xb1\x72\xc2\xc8\xb2\x27\xfa\x29\xfc\x15\x9f\xf1\xd4\x3a\x2c\x71\xfe\xa2\x63\x27\xb9\x87\xe3\x73\xb7\xc1\x53\xe8\x5f\x56\x99\xe4\xc0\x6c\x3e\xeb\x5e\x03\x35\x61\x7a\xfc\xe9\xa4\xe6\x90\x1d\x4f\xc6\xa9\xab\x12\x46\xad\xb9\x27\xe7\x18\x22\x55\xa0\x8b\xe6\x38\x98\x6c\xc2\x63\x84\x25\x84\xc6\x14\xe8\x0e\x6c\xec\x50\x0b\xaf\x76\x18\x5a\x4e\xea\x3d\x70\x33\xb1\xf3\x41\x4c\x0e\xca\x51\xb3\x2a\x94\x3b\x9f\xc7\xff\xbf\x19\x9e\x36\x47\x70\xc2\xd3\xe5\x31\x70\xc2\x7b\x60\x8f\x6a\x4f\x75\x84\xc1\x67\x42\x77\xec\x3c\x1b\x77\xb0\x1c\xd3\xc0\xf1\xf3\x6f\x2a\xa1\x8e\x0a\x80\xbc\xd1\x73\xe8\xa9\xc6\xc7\xd9\xa3\xe6\x40\x4e\x25\x7b\xcb\x80\xa2\x09\xef\x76\x8c\x13\x57\x6c\xe5\x0f\x06\xf0\x14\xab\xae\xf6\x75\x95\xed\xf2\x89\x52\xd7\x9f\xe8\x78\xf1\xa9\xcb\x7f\x6c\xb1\x05\x55\xfc\x38\x90\x3d\xd1\xce\x24\x52\x31\x0b\xe1\x1b\x87\x93\x57\x80\x23\x77\x85\xed\x76\x31\xd0\xd3\x24\x5d\xf5\xd9\x1a\x94\x87\x52\x50\x28\xc5\xd6\xe8\x16\x84\x94\x48\x31\xa3\x97\x18\x5f\xd0\x5e\xf4\x6f\x36\x77\x6b\xa1\x09\xef\x4e\x4f\xee\xef\x17\xbd\x21\x6e\xba\x1a\x7e\xcc\x16\x3d\xd3\x40\xff\x30\x1e\x8e\x93\x1d\xb1\x13\x79\xd7\x48\x1f\xe5\xdd\x87\x71\x9e\x5b\xbc\xc6\x03\xb5\x46\xc2\xca\xda\xed\x16\xb1\x66\xaf\x1f\x44\x9d\x6d\x94\x9f\xcd\xa1\x42\xc1\x80\x73\x42\x03\x11\x66\xec\x2e\x10\x9a\x9a\xbc\x43\x51\x0d\x11\x71\x7a\x20\x18\xb3\x5e\x90\x17\x1e\x2f\x39\xc1\x3c\xea\x37\x06\xff\xf0\xbd\xf3\x24\x15\x4f\x18\x98\xf5\x77\xcc\xfa\x7a\x94\x30\x79\x81\xd9\x26\x9b\xc3\x7f\x90\x3b\xcb\x57\xda\x36\xc5\x69\x16\x1e\x88\xbc\xdd\xf2\x7c\x42\x50\x0b\xe7\x95\x6c\xb4\x70\xbd\x31\x3a\x2e\x87\xa5\xb4\xbb\xf5\x72\x4f\x9c\x47\x25\xf3\xca\xf6\xcc\x37\xdb\x5b\xb7\xa5\x61\xd8\x3c\x38\x16\x2e\xba\x14\x2b\x79\xfe\xcd\xc5\xc3\x7f\x53\x85\xdf\x44\xef\xeb\xb3\xd2\xf0\x52\x6d\xcd\x13\xae\xf1\xa1\xa3\xbe\x1a\x89\x0f\x3c\xa4\xe7\xb7\x18\xf9\x5d\x86\x3e\xf0\x71\x6f\x39\x76\x24\x5c\xfc\x88\xeb\xdc\xa2\xdb\x1d\xf9\x86\xc1\x03\xc1\xd8\x01\x71\xac\xfe\x90\x96\x62\xb1\xe5\x32\x16\xbd\x8c\xd0\x27\x1f\x46\x9e\x27\xdf\x56\x92\x8f\x24\x6c\x9c\xf0\x74\x17\x9a\xf2\x6c\xa2\xa5\x56\xe4\xd1\x2c\x3a\x11\x2e\xf3\x8b\xb3\x8b\xf3\x01\xa4\x1b\xdc\x28\xf2\xae\x7d\xad\x88\x21\xbe\x95\xc2\x04\x77\x3d\x40\xca\x75\x64\x8b\x22\xd2\x2d\xa8\x23\x4c\xd5\xee\x72\xe3\xcb\xa2\x50\xf1\x91\x85\x8b\xf7\x4b\x6e\xde\x27\x30\x8e\xfb\x63\xff\x76\x7f\x0f\x2e\xb4\x02\x5f\x38\xbd\x08\x5f\xbd\x26\xf9\x74\xfc\xad\xbf\xe0\xd7\xba\x63\xff\xfa\xe3\x6d\xdf\x78\xd1\xbc\x1b\x88\x1a\xd7\xb5\x61\x60\x0a\xeb\x09\x6c\x20\x86\x4a\xb4\xe1\x71\x4a\xef\xc6\x27\x4a\x43\xda\xda\x6d\x53\x83\x22\x6a\x90\xc0\x1a\x20\x5b\x21\xbc\x1f\xbe\x15\x31\xf7\xa6\xa6\xf1\x05\xb2\x30\xd4\xbf\x7f\xcd\x3e\x5a\x83\xb3\x74\xe7\x55\x10\x20\x7d\x83\x8c\x97\xd3\xf4\x59\xb2\x1f\x6c\x82\x7c\x93\x9d\x61\xe6\x9a\x9d\xcf\x4e\xfe\x17\x00\x00\xff\xff\x47\x20\xde\x05\x5f\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 973,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x6a\xdc\x4c\x10\xbc\xeb\x29\x0a\xf6\xfa\x49\x46\x06\x7f\x10\xdd\x4c\x9c\x04\x43\x62\x16\x8c\x73\xef\x1d\xb5\xe4\xc1\xf3\x97\x99\x9e\xcd\x2a\xc2\xef\x1e\xa4\x5d\xef\x4a\xb1\xfb\x24\x4d\x55\x57\x57\x4f\xf7\x94\x65\x59\x6c\x60\xd9\x2a\x52\xcf\xdc\xa2\xe5\x60\xfc\x60\xd9\x09\x72\xe2\x16\xbb\x01\x5f\x4d\x3e\x40\x3c\x66\x46\xb1\x81\xf2\x4e\x48\x3b\x8e\xd0\x96\x7a\x86\x65\xa1\x96\x84\xaa\x82\x82\xfe\xc9\x31\x69\xef\x1a\x50\x08\xe9\x6a\x5f\x17\x2f\xda\xb5\x0d\xee\xce\xb2\xc5\x1b\xbd\x29\x00\x47\x96\x9b\x4b\xf5\x71\x84\xee\x50\x3d\x90\xe5\x14\x48\x31\x5e\x5f\x4f\xa4\xf9\xb7\xc1\x38\xae\xd1\x71\x04\xbb\x76\xa2\xa5\xc0\x6a\x52\x8c\x1c\x8c\x56\x94\x1a\xd4\x05\x90\xd8\xb0\x12\x1f\x27\x04\xb0\x24\xea\xf9\x3b\xed\xd8\xa4\xe3\xc1\x3b\x03\x05\x20\x6c\x83\x21\xe1\x53\xca\xc2\xec\x14\x66\x95\xfd\x51\x3e\xf0\x66\x65\xc6\x7d\xcb\x8f\x2b\x13\x53\xec\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x95\x4f\x0d\x8c\x76\xf9\x70\x22\x9d\x2f\xf9\x5c\xac\xfc\xb0\xd8\x14\xf3\x18\x16\x40\x53\x57\xff\x57\x9f\x4a\x32\x41\x3b\x5e\xb3\xb6\xd9\x98\xad\x37\x5a\x0d\x0d\xee\xbb\x07\x2f\xdb\xc8\x69\x9a\xca\x1b\x8b\x62\xbf\x68\xaf\x44\x69\x71\x53\x5f\x03\xd8\xe0\x07\x1d\xb4\xcd\x76\xaa\xe3\xe3\x30\x6d\x44\x4e\xfc\x1f\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x26\xde\xe3\xc6\x62\x95\x98\xf4\x1f\x46\xe7\x23\xbc\x63\x68\x61\xbb\xa4\x07\xd4\xf5\x75\x5d\x63\x83\x3b\xee\x28\x1b\x41\xf0\xf1\xe2\x6b\x33\x71\xf6\xfb\xe3\xe7\x93\x53\xde\xce\x3b\x2a\x1e\x3d\x0b\x8c\xef\x13\x7c\x07\x26\xf5\x8c\xc8\xbf\x32\x27\x01\xb9\x16\x91\x53\xf0\x2e\x71\x75\x16\x9a\x54\x57\x1d\x1e\x6f\x55\x19\xcd\x4e\x2e\x0d\x2c\x26\xb0\xf5\x51\x9a\xa3\xbb\xd3\x82\xde\xb6\xed\x23\xab\x1c\xb5\x0c\x9f\xbd\x13\x3e\xc8\xbc\xa8\xc7\x48\x6b\xa4\x59\x48\xc6\xec\x6e\xd3\x53\xe2\x78\x92\xfb\x17\xfa\x16\x7d\x0e\xef\x31\x32\xc6\xff\xde\x46\xbd\xd7\x86\x7b\xfe\x92\x14\x19\x92\xf9\x91\x75\x64\x12\x5f\x1e\xc1\xdf\x00\x00\x00\xff\xff\xe0\xf7\x02\x6a\xcd\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
