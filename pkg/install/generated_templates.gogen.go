// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 826,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xbb\x8e\xdb\x30\x10\xec\xf9\x15\x03\xb8\x70\x12\x58\x0a\xd2\x05\xea\x6c\x17\x29\x12\xa4\x50\x1e\x4d\x90\x62\x45\xae\xce\x3c\xd3\xa4\xc0\x87\xef\x21\xe8\xdf\x0f\x92\x7c\x07\xcb\xf6\x1d\x60\x5c\xc7\xdd\x9d\xe5\xce\xce\x4e\x96\x65\x62\x86\xdf\x1b\x46\x60\xbf\xd7\x92\x41\x52\xba\x64\xe3\x02\xd2\xa4\x10\xd9\xc3\x3b\xc3\x61\x01\xb2\x6a\x92\x42\xa5\xad\xd2\xf6\x06\xe4\x59\xcc\xe0\xac\x79\x80\x65\x56\xac\x50\x3b\x8f\xef\xa9\x62\x6f\x39\x72\xc0\x9d\x8e\x9b\xa1\x25\xab\x28\xb0\xea\x27\x70\x08\x90\xce\x46\xef\x0c\x3e\x94\xab\xe5\xfa\x63\x2e\xa8\xd1\x7f\xd9\x07\xed\x6c\x81\xfd\x17\xb1\xd5\x56\x15\xf8\x35\xb2\x5a\x8e\xa4\xc4\x8e\x23\x29\x8a\x54\x08\xc0\x50\xc5\x26\xf4\x2f\xc0\xd2\x8e\x0b\xd4\x26\xdd\x8b\xe3\xa0\x6d\xa1\x6b\xe4\x3f\x69\xc7\xa1\x21\xc9\xe8\xba\x43\x7d\x08\x0b\xb4\xed\xb4\xda\xb6\x60\xab\xba\x4e\xf4\xba\x1c\x13\xf2\x15\xc9\x9c\x52\xdc\x38\xaf\x1f\x29\x6a\x67\xf3\xed\xd7\x90\x6b\xf7\xf9\x85\xea\x7a\x14\xa7\x74\x86\xaf\xe5\x29\x7c\x32\x3c\x40\x32\x50\xa3\xbf\x79\x97\x9a\x50\xe0\xdf\xfc\xd3\xfc\xff\xd0\xe7\x39\xb8\xe4\x25\x4f\x92\x7b\xf6\xd5\x51\x22\x83\x75\xb6\x3c\x00\xff\x94\x3f\x5e\xc7\xbe\x6f\xb9\xd5\x78\xf7\xeb\x77\x74\x86\x4b\xae\x7b\xd0\xf3\x8e\x6f\x8c\x16\xc0\xb9\xac\x93\xff\x42\xaa\x6e\x59\xc6\x83\x6c\x17\xed\x72\x46\xe7\xf4\xf8\xa7\xee\xb8\xe4\x07\x13\xfa\x97\xe2\x9a\x92\x89\xa3\x41\x7a\x1f\x3d\x05\x00\x00\xff\xff\xdb\x2d\xc3\x7c\x3a\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7263,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\x3b\x6e\x8b\xc3\xf6\x5c\x5c\x9a\x0f\x37\x97\x26\x35\xec\xe4\x0e\x7d\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x17\x46\xff\xf7\xc3\x90\xfb\xc1\x95\x65\xa7\xe8\xdb\xf9\x21\xb1\xc9\xe1\x70\xe6\x37\xdf\xdc\xc5\x62\x71\x22\x6a\xf5\x6f\x74\xa4\xac\xc9\x41\xd4\x35\x2d\x77\xe7\x27\x5b\x65\x8a\x1c\xde\x60\xad\x6d\x5b\xa1\xf1\x27\x15\x7a\x51\x08\x2f\xf2\x13\x00\x23\x2a\xcc\x61\xad\x9b\xdf\xef\xef\x41\xad\x21\xfb\x24\x2a\xa4\x5a\x48\x84\x3f\xfe\xe8\xf6\xc3\x9f\x39\xdc\xdf\x4f\x77\xef\xef\x01\x4d\xc1\x64\x54\xa3\x64\x66\x0e\x6b\xad\xa4\xa0\x1c\xce\x4f\x00\x08\x35\x4a\x6f\x1d\xef\x00\x54\xc2\xcb\xf2\x67\xb1\x42\x4d\x71\x21\xbd\x9b\xa9\xbd\x13\x1e\x37\x6d\xdc\xf4\x6d\x8d\x39\xdc\xa0\x74\x28\x3c\x9e\x00\x78\xac\x6a\x2d\x3c\x76\xcc\x12\x0d\xf8\x47\x18\x63\xbd\xf0\xca\x9a\x81\x39\x40\xed\x6c\x85\xbe\xc4\x86\x32\x65\x97\xb5\x75\x3e\x87\xd9\xc5\xd9\xc5\xf9\x0c\x9e\x81\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\x2c\x2b\xf4\x4e\x49\x62\xe5\x6a\xab\x8c\x7f\x4e\xc0\x87\xb3\x8e\xb1\x9e\xe8\x70\xa0\x05\x40\x8f\x45\xd8\xb2\x05\xde\x4e\x50\xe0\x9f\x15\x7a\x91\x6d\x9b\x15\x3a\x83\x1e\x83\x70\x96\x72\xd0\xca\x74\x2c\x18\x3a\xb7\x53\x12\x5f\x49\x69\x1b\xe3\x3f\x4d\x6f\x00\xd8\x59\xdd\x54\x38\xc8\xb0\xe8\x64\xd8\x28\xbf\xd8\x62\x3b\x5c\x44\x0c\x9f\x1f\x2f\xee\x57\x46\x7e\x0b\x3e\x52\x04\xcf\x48\xa8\x0a\x5c\x8b\x46\xfb\x8f\xb6\xc0\x1c\xce\xbe\x39\x3b\x83\x67\xb0\x2f\xd1\x40\xc5\xd2\x60\x01\x0e\x45\xb1\xb0\x46\xb7\x73\xd8\x23\xec\xad\x79\xee\x61\x85\x20\x56\x1a\x19\x48\x59\x56\xb6\x38\xe9\x18\x3e\x83\xcf\xa5\x22\x50\x04\x02\x7c\x55\xaf\x09\x1a\xc2\x02\xd6\xd6\xc1\x06\x0d\x3a\xe1\x95\xd9\xc0\xed\xed\x4f\xb0\xc5\x96\x32\x78\x6f\xe0\xc3\xdf\x09\x7e\xb8\x84\xf3\xec\xfc\x6c\x3e\x70\xe9\xef\x8e\x2a\x10\x08\x87\xa9\x1c\x64\x59\x14\x83\x58\x80\x00\xc2\x5a\xb0\x37\x75\x40\xc1\x1e\x07\x36\x52\x18\xd8\x3b\xe5\x59\xd0\xec\x38\x7e\x1b\x34\x03\x18\x58\xd5\xbe\x7d\xa3\x5c\x0a\x62\x85\x85\x6a\xaa\x1c\x3e\x62\x65\x5d\x9b\xea\x89\xb0\xb6\x5a\xdb\x3d\x6b\xd4\x5d\xad\x28\xa8\xda\x10\xaf\x09\x90\x0d\x79\x5b\x29\x46\x60\x6b\xec\xde\xfc\x56\x5a\xf2\x34\xb0\x58\x2b\x8d\x73\xd8\x97\x4a\x96\xd0\xda\x06\xf6\x4a\xeb\xa8\x94\xb7\x50\x58\x0e\x50\x5e\xe6\x43\xfc\x8b\x03\xbb\x37\x2c\xf6\xc0\xc0\x61\x6d\xc1\x09\x5f\xa2\x03\x5f\x0a\xd3\x5d\xbc\x51\xbe\x6c\x56\x60\x79\x11\x41\xab\x2d\x66\xf0\xab\x6d\x9e\x6b\x0d\x42\x93\xed\xaf\x98\x82\x0d\xca\x83\x32\xde\x86\x33\xd2\x1a\x2f\x94\x41\x37\x87\x15\x6a\xbb\xcf\xe0\x16\x47\x54\x4b\xef\x6b\xca\x97\x4b\xf6\x29\x59\xb0\x47\x6b\xdc\x08\xd9\x86\x85\xe5\xa6\x51\x05\xd2\xb2\x21\x5c\xd4\x4e\xed\x84\xc7\xe0\x77\xac\xc5\x72\x60\xd1\x1b\x81\xa8\x5c\x48\x6b\xd6\x6a\x33\x6c\x01\xc4\x85\x8f\xa2\xce\x93\xc5\x34\xf4\x16\xc9\xb1\xbf\x6a\x90\x10\x93\xcb\xc8\x64\xf4\xbb\xaf\x1a\x63\xaf\xa8\xe4\x95\x52\xec\x10\x04\x14\x6a\xbd\x46\xc7\x69\xb6\xe7\xd0\x85\xd3\x98\x4a\x03\xf6\x91\x5d\x8a\x3e\xa7\xa3\x9d\x2a\xb0\xc7\x7b\xad\x36\x95\xa8\x47\x41\x94\x2f\x41\x18\x40\xe3\x5d\x1b\x74\xb8\x8b\x44\x77\x73\x10\xa6\x80\xc6\x48\x5b\x71\x7e\x0f\xe7\xa3\xb6\x1f\x83\x1d\x85\x29\x06\x2e\x68\x76\x81\x83\x42\xea\x0c\xf9\xc0\x02\x0c\xc3\x5f\xb0\x40\x72\xec\xab\x16\x08\x29\xc0\x5b\x50\x15\x67\x56\xb8\xba\xbe\x0a\xd1\x0f\x2f\x58\x2d\x52\x1b\xa3\xcc\x78\x39\x2b\xb7\x43\xa7\xd6\x4a\x86\x14\x0f\x75\xe3\x6a\x4b\x48\xa7\x7f\x02\xc8\x81\x4b\xcc\x1b\x11\x45\x06\x88\xef\xfb\x13\xc0\x81\x70\x9b\x31\x3e\x1f\x41\x6c\x53\x6f\x38\x71\x50\x02\xcd\x34\xf7\x3e\x7b\x24\xfb\x3e\x3c\x77\x24\xfb\xf6\x70\x0e\x21\xf8\x20\xf1\x27\xa5\xa1\x43\xdd\x61\x48\x90\xc6\xc2\x2c\xe7\xb2\x49\x7e\x06\xaa\x12\x1b\x8c\xde\xcf\x07\x32\x78\xa7\x4c\x11\x74\xae\x38\x9f\x38\x94\xa3\xd7\xc6\x5c\xa2\x51\x10\x72\xd6\x08\x47\xd9\x08\xdc\x59\x80\xf0\x43\xc0\x97\xcd\x2a\x2b\xac\xdc\xa2\xcb\xa4\xad\x96\xae\xcb\x00\x31\xee\xbd\x18\xa0\xeb\xed\xc8\x1d\x02\x77\x0f\x7c\xab\x17\x1b\x60\x49\xb3\x81\x26\x5c\x93\x43\xc7\x50\xd9\x94\x5b\x7e\x9e\xbd\xbc\xc8\x5e\x4e\x69\xaf\x1b\xad\xaf\xad\x56\xb2\xcd\xe1\xfd\xfa\x93\xf5\xd7\x0e\x29\xd5\xc2\x21\xd9\xc6\x49\xa4\x34\x81\x3b\xfc\x6f\x83\xe4\x27\x6b\x00\xb2\x6e\x72\xf8\xf6\xac\x9a\x2c\x56\x21\xc7\xe7\xf0\xdd\x37\x1f\xd5\xd8\x58\x58\x97\x1e\x5e\x8c\x96\xb9\x0e\x4d\xc6\xc5\xd9\x05\x97\x4c\x65\xd6\xd6\x55\xc1\x65\x85\x1e\xa8\xb5\xda\xa1\x41\xa2\x6b\x67\x57\x98\x4a\xc0\x90\x5e\x4d\xcb\x75\xbc\x2a\x32\x9c\x2e\x0b\x5f\xe6\xb0\x14\xb5\x8a\x48\xef\xbe\x5b\xaa\x02\x8d\x57\xbe\xcd\xea\x66\x95\xd0\x2a\xa3\xbc\x12\xfa\x0d\x6a\xd1\xde\x72\x7c\x16\x94\xc3\xb7\x09\x81\x57\x15\xda\xc6\x1f\xd9\xe3\xea\xaa\xfe\x3f\x44\x4d\x82\x76\x62\x98\xe3\x7d\x11\xc4\xfa\x76\x1d\x25\x43\x2f\x83\x64\xc5\x92\xa8\xe4\xce\xd0\xc6\x5e\x15\xb4\xed\xf2\xcd\x86\x4d\x06\xca\x44\x9f\x7b\x4e\xf1\x0c\x51\xb9\x9c\xa4\xc9\x1e\xb3\x5f\x8c\x6e\x73\xf0\xae\x41\xe6\xc6\xcd\x4f\xc8\x50\xab\x2e\xb1\x73\x48\xd5\xe8\xd6\xd6\x49\x64\xa6\xb1\xdb\xe1\x66\xe7\x31\xc1\xd3\x86\x64\x2a\xfb\x4e\xb8\x4e\xf6\x48\xf6\xd7\xc4\x4f\x62\xf4\xbd\x91\xba\x09\x99\x93\x7b\xb6\x58\xe0\xfa\xac\x1a\x9b\x82\xaf\xf4\x30\x7d\x17\xf3\x3d\x1f\x3d\xe8\x2f\x86\xec\x0a\x05\x4a\x2d\x1c\xf7\x6a\x2b\xbb\x4b\x12\xc0\x13\x6d\x40\x4c\x8f\xa9\xf2\xce\x5a\xbf\xcc\x88\xca\x47\x15\x10\x66\x72\xeb\x6c\x2c\x51\xb3\x78\xf3\xbc\x27\x49\x38\xa0\xd9\x29\x67\x4d\x28\x08\xb1\xd6\xce\x3e\x7c\xf9\xf1\xed\xeb\x5f\x3e\xbd\x7b\x7f\x35\x8b\x25\x60\xce\x78\xd8\x1d\x3a\x37\xad\xd7\x09\x9b\x50\xe2\x56\x6d\xac\xa6\x5e\x1f\xd3\xf1\x41\xa1\x7d\xa8\xe3\xe8\x9c\x4c\xfc\xa8\xa2\x5c\xf3\x78\x54\xe9\x6f\xe3\x14\x9d\xb4\x22\x9d\x74\xc1\x26\x09\x8b\xc3\x86\x26\x35\x7a\xe8\x66\xfa\x9e\x5b\x18\x10\xda\xa3\x33\xdc\x53\x3f\x90\x78\xed\x6c\xc5\x6e\xd1\x77\x2c\x73\x10\xc4\xee\xd6\x55\x55\x86\x41\x5b\xb9\xa5\x87\xc6\x46\xb3\xcb\x8f\xe0\x32\xc2\x3d\xc1\x65\x27\x74\x83\x0f\x30\xf9\x9a\x13\x1f\xfa\x40\x5f\x73\x9f\xf0\x00\x2e\xf9\xd3\x52\xff\x44\xb1\x7f\xc4\x2f\x99\x2a\x76\x37\x13\xba\x69\x7e\xf8\x5a\xe4\xed\x05\x37\x25\x16\xa8\xa9\x6b\xdd\xc2\x4f\x9f\x3f\x5f\xc3\x4a\x90\x92\x20\x1a\x5f\x82\x74\x18\x32\xa9\xd0\xb1\xaa\x8f\x83\x00\x33\xdc\x29\x11\x14\xbf\xbb\x7a\xff\xf9\xb7\x57\x5f\x3e\xff\xf4\xe5\xf6\xed\xcd\x5d\x50\x77\x58\xfa\xf0\xf6\xd7\xbb\x89\xc3\xef\x84\x53\x3c\xc6\x51\xdf\x20\x27\x0c\x63\xfb\x72\x60\xbf\x77\xce\x56\x53\x1b\x46\xb2\x1b\x5c\xe7\x13\xcd\x27\xbd\x22\x27\x36\x56\x61\x04\x80\x31\xcf\x27\x78\x44\x08\xe2\x70\x8a\x05\x57\x62\x29\x64\x89\x05\xbb\x56\xea\xdb\x43\x5b\xcd\x48\x31\xf7\x79\xc2\xc5\xba\xae\x6f\x4e\x0e\x74\xc3\x75\x38\x38\x0f\x97\xf0\x50\xd8\x61\xec\x4b\xa4\xd4\x17\xc6\xee\xd5\xef\x2d\x4b\xd9\x30\x4e\x21\xe2\xc2\x13\x42\x70\x44\x28\xed\x3e\x0c\xbe\xd6\x18\x94\xc1\x64\xca\x4f\x7d\x67\xb1\x18\x14\x08\x83\x0f\x5f\x7e\x39\x2c\x65\x5d\xd3\x97\xd1\x4e\x66\x52\x37\xe4\xd1\x65\x9c\xc0\x75\x0a\xc9\x17\x8a\xb9\x66\x84\xe2\x75\x24\x7d\x7f\x3d\x51\x8a\xd3\x0e\xa1\x0f\x83\xf5\xd4\xb3\x47\x19\x7a\x7a\xf6\x2e\xef\x98\x32\x8c\xba\x49\x09\x4a\x25\xee\xa8\x2f\x4f\x26\x5d\xa6\x22\xa8\x1a\x0a\xa3\x7f\x40\x4f\x61\x11\xc3\x69\x15\x0a\x5b\xe8\xf1\xc2\xc4\xff\xa2\x1f\xa3\x4f\x53\x59\xfa\xe4\x12\xc3\x90\x1d\x38\x19\xfc\x27\x82\x70\x31\x88\x05\x6e\x51\x28\x77\xf9\xa0\xec\xa5\x62\xdd\x24\x1d\xe6\x68\xbc\x2f\x37\x3f\xc7\x97\x09\x61\x36\x71\xef\x4a\xf9\x30\x2d\x93\xf2\xd6\xb5\x43\xba\x7e\xc7\x9d\x71\xc2\xee\xa9\x98\x63\xb7\x49\x74\xef\x42\xe6\x68\x38\xa5\xb1\xd0\xf7\xce\x7f\x7b\x91\x46\xe6\x69\x3e\xfe\xfd\xe1\xed\xaf\xa7\xff\x8c\x33\x7b\x68\xab\x1b\x42\xb7\x1c\x85\xcd\xd2\x40\x67\x7c\x38\x9c\x1a\xa7\x2f\xef\xef\x21\xbb\x52\x9e\x95\x0d\x8f\x77\x53\x8a\x95\x13\x46\x96\x3d\xd1\x8f\xe1\xaf\xf8\x8c\xa7\xd6\x61\x89\xf3\x17\x1d\x3b\xc9\x3d\x1c\x9f\xbb\x0d\x9e\x42\xff\xb2\xca\x24\x07\x66\xf3\x59\xf7\x1a\xa8\x09\xd3\xe3\x4f\x27\x35\x87\xec\x78\x32\x4e\x5d\x95\x30\x6a\xcd\x3d\x39\xc7\x10\xa9\x02\x5d\x34\xc7\xc1\x64\x13\x1e\x23\x2c\x21\x34\xa6\x40\x77\x60\x63\x87\x5a\x78\xb5\xc3\xd0\x72\x52\xef\x81\x9b\x89\x9d\x0f\x62\x72\x50\x8e\x9a\x55\xa1\xdc\xf9\x3c\xfe\xff\x72\x78\xda\x1c\xc1\x09\x4f\x97\xc7\xc0\x09\xef\x81\x3d\xaa\x3d\xd5\x11\x06\x5f\x08\xdd\xb1\xf3\x6c\xdc\xc1\x72\x4c\x03\xc7\xcf\xbf\xad\x84\x3a\x2a\x00\xf2\x46\xcf\xa1\xa7\x1a\x1f\x67\x8f\x9a\x03\x39\x95\xec\x2d\x03\x8a\x26\xbc\xdb\x31\x4e\x5c\xb1\x95\x3f\x18\xc0\x53\xac\xba\xda\xd7\x55\xb6\xcb\x27\x4a\x5d\x7f\xa2\xe3\xc5\xa7\x2e\xff\xb1\xc5\x16\x54\xf1\xc3\x40\xf6\x44\x3b\x93\x48\xc5\x2c\x84\x6f\x1c\x4e\x5e\x01\x8e\xdc\x15\xb6\xdb\xc5\x40\x4f\x93\x74\xd5\x67\x6b\x50\x1e\x4a\x41\xa1\x14\x5b\xa3\x5b\x10\x52\x22\xc5\x8c\x5e\x62\x7c\x41\x7b\xd1\xbf\xd9\xdc\xad\x85\x26\xbc\x3b\x3d\xb9\xbf\x5f\xf4\x86\xb8\xe9\x6a\xf8\x31\x5b\xf4\x4c\x03\xfd\xc3\x78\x38\x4e\x76\xc4\x4e\xe4\x5d\x23\x7d\x94\x77\x1f\xc6\x79\x6e\xf1\x1a\x0f\xd4\x1a\x09\x2b\x6b\xb7\x5b\xc4\x9a\xbd\x7e\x10\x75\xb6\x51\x7e\x36\x87\x0a\x05\x03\xce\x09\x0d\x44\x98\xb1\xbb\x40\x68\x6a\xf2\x0e\x45\x35\x44\xc4\xe9\x81\x60\xcc\x7a\x41\x5e\x78\xbc\xe4\x04\xf3\xa8\xdf\x18\xfc\xdd\xf7\xce\x93\x54\x3c\x61\x60\xd6\xdf\x31\xeb\xeb\x51\xc2\xe4\x05\x66\x9b\x6c\x0e\xff\x41\xee\x2c\x5f\x6b\xdb\x14\xa7\x59\x78\x20\xf2\x76\xcb\xf3\x09\x41\x2d\x9c\x57\xb2\xd1\xc2\xf5\xc6\xe8\xb8\x1c\x96\xd2\xee\xd6\xcb\x3d\x71\x1e\x95\xcc\x2b\xdb\x33\xdf\x6c\x6f\xdd\x96\x86\x61\xf3\xe0\x58\xb8\xe8\x52\xac\xe4\xf9\xcb\x8b\x87\xff\xa6\x0a\xbf\x8d\xde\xd7\x67\xa5\xe1\xa5\xda\x9a\x27\x5c\xe3\x63\x47\x7d\x35\x12\x1f\x78\x48\xcf\x6f\x31\xf2\xbb\x0c\x7d\xe0\xe3\xde\x72\xec\x48\xb8\xf8\x11\xd7\xb9\x45\xb7\x3b\xf2\x0d\x83\x07\x82\xb1\x03\xe2\x58\xfd\x3e\x2d\xc5\x62\xcb\x65\x2c\x7a\x19\xa1\x4f\x3e\x8c\x3c\x4f\xbe\xad\x24\x1f\x49\xd8\x38\xe1\xe9\x2e\x34\xe5\xd9\x44\x4b\xad\xc8\xa3\x59\x74\x22\x5c\xe6\x17\x67\x17\xe7\x03\x48\x37\xb8\x51\xe4\x5d\xfb\x46\x11\x43\x7c\x2b\x85\x09\xee\x7a\x80\x94\xeb\xc8\x16\x45\xa4\x5b\x50\x47\x98\xaa\xdd\xe5\xc6\x57\x45\xa1\xe2\x23\x0b\x17\xef\x57\xdc\xbc\x4f\x60\x1c\xf7\xc7\xfe\xed\xfe\x1e\x5c\x68\x05\xbe\x72\x7a\x11\xbe\x7a\x4d\xf2\xe9\xf8\x5b\x7f\xc1\x2f\x75\xc7\xfe\xcd\xa7\xdb\xbe\xf1\xa2\x79\x37\x10\x35\xae\x6b\xc3\xc0\x14\xd6\x13\xd8\x40\x0c\x95\x68\xc3\xe3\x94\xde\x8d\x4f\x94\x86\xb4\xb5\xdb\xa6\x06\x45\xd4\x20\x81\x35\x40\xb6\x42\xf8\x30\x7c\x2b\x62\xee\x4d\x4d\xe3\x0b\x64\x61\xa8\x7f\xff\x9a\x7d\xb2\x06\x67\xe9\xce\xeb\x20\x40\xfa\x06\x19\x2f\xa7\xe9\xb3\x64\x3f\xd8\x04\xf9\x26\x3b\xc3\xcc\x35\x3b\x9f\x9d\xfc\x2f\x00\x00\xff\xff\x9c\xf6\x97\x24\x5f\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 973,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x6a\xdc\x4c\x10\xbc\xeb\x29\x0a\xf6\xfa\x49\x46\x06\x7f\x10\xdd\x4c\x9c\x04\x43\x62\x16\x8c\x73\xef\x1d\xb5\xe4\xc1\xf3\x97\x99\x9e\xcd\x2a\xc2\xef\x1e\xa4\x5d\xef\x4a\xb1\xfb\x24\x4d\x55\x57\x57\x4f\xf7\x94\x65\x59\x6c\x60\xd9\x2a\x52\xcf\xdc\xa2\xe5\x60\xfc\x60\xd9\x09\x72\xe2\x16\xbb\x01\x5f\x4d\x3e\x40\x3c\x66\x46\xb1\x81\xf2\x4e\x48\x3b\x8e\xd0\x96\x7a\x86\x65\xa1\x96\x84\xaa\x82\x82\xfe\xc9\x31\x69\xef\x1a\x50\x08\xe9\x6a\x5f\x17\x2f\xda\xb5\x0d\xee\xce\xb2\xc5\x1b\xbd\x29\x00\x47\x96\x9b\x4b\xf5\x71\x84\xee\x50\x3d\x90\xe5\x14\x48\x31\x5e\x5f\x4f\xa4\xf9\xb7\xc1\x38\xae\xd1\x71\x04\xbb\x76\xa2\xa5\xc0\x6a\x52\x8c\x1c\x8c\x56\x94\x1a\xd4\x05\x90\xd8\xb0\x12\x1f\x27\x04\xb0\x24\xea\xf9\x3b\xed\xd8\xa4\xe3\xc1\x3b\x03\x05\x20\x6c\x83\x21\xe1\x53\xca\xc2\xec\x14\x66\x95\xfd\x51\x3e\xf0\x66\x65\xc6\x7d\xcb\x8f\x2b\x13\x53\xec\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x95\x4f\x0d\x8c\x76\xf9\x70\x22\x9d\x2f\xf9\x5c\xac\xfc\xb0\xd8\x14\xf3\x18\x16\x40\x53\x57\xff\x57\x9f\x4a\x32\x41\x3b\x5e\xb3\xb6\xd9\x98\xad\x37\x5a\x0d\x0d\xee\xbb\x07\x2f\xdb\xc8\x69\x9a\xca\x1b\x8b\x62\xbf\x68\xaf\x44\x69\x71\x53\x5f\x03\xd8\xe0\x07\x1d\xb4\xcd\x76\xaa\xe3\xe3\x30\x6d\x44\x4e\xfc\x1f\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x26\xde\xe3\xc6\x62\x95\x98\xf4\x1f\x46\xe7\x23\xbc\x63\x68\x61\xbb\xa4\x07\xd4\xf5\x75\x5d\x63\x83\x3b\xee\x28\x1b\x41\xf0\xf1\xe2\x6b\x33\x71\xf6\xfb\xe3\xe7\x93\x53\xde\xce\x3b\x2a\x1e\x3d\x0b\x8c\xef\x13\x7c\x07\x26\xf5\x8c\xc8\xbf\x32\x27\x01\xb9\x16\x91\x53\xf0\x2e\x71\x75\x16\x9a\x54\x57\x1d\x1e\x6f\x55\x19\xcd\x4e\x2e\x0d\x2c\x26\xb0\xf5\x51\x9a\xa3\xbb\xd3\x82\xde\xb6\xed\x23\xab\x1c\xb5\x0c\x9f\xbd\x13\x3e\xc8\xbc\xa8\xc7\x48\x6b\xa4\x59\x48\xc6\xec\x6e\xd3\x53\xe2\x78\x92\xfb\x17\xfa\x16\x7d\x0e\xef\x31\x32\xc6\xff\xde\x46\xbd\xd7\x86\x7b\xfe\x92\x14\x19\x92\xf9\x91\x75\x64\x12\x5f\x1e\xc1\xdf\x00\x00\x00\xff\xff\xe0\xf7\x02\x6a\xcd\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
